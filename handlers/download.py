from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.youtube import download_best_quality as download_video
import asyncio
import os
import requests
import urllib.parse
import subprocess
import math
from aiogram.exceptions import TelegramBadRequest

router = Router()

class DownloadStates(StatesGroup):
    waiting_for_url = State()

TELEGRAM_MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB ‚Äî –∑–º—ñ–Ω—ñ—Ç—å —è–∫—â–æ —É –≤–∞—Å —ñ–Ω—à–∏–π –ª—ñ–º—ñ—Ç

def upload_to_transfersh(file_path: str) -> str | None:
    """–ü—Ä–æ—Å—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ transfer.sh ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î URL –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ."""
    url = f"https://transfer.sh/{os.path.basename(file_path)}"
    try:
        with open(file_path, "rb") as f:
            resp = requests.put(url, data=f, timeout=120)
        if resp.status_code in (200, 201):
            return resp.text.strip()
    except Exception:
        pass
    return None

async def send_local_file_to_user(message: types.Message, file_path: str, caption: str = ""):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ multipart upload:
    - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î types.FSInputFile –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    - —Ä–æ–±–∏—Ç—å fallback –Ω–∞ document, —è–∫—â–æ video –Ω–µ –ø—Ä–æ–π—à–ª–æ
    - –ø–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False —è–∫—â–æ –Ω—ñ
    """
    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —á–∞—Ç—É: –ø–æ–∫–∞–∂–µ–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É
    abs_path = os.path.abspath(file_path)
    exists = os.path.exists(file_path)
    size = os.path.getsize(file_path) if exists else "N/A"
    await message.answer(f"debug: abs_path={abs_path!r}, exists={exists}, size={size}")

    if not exists:
        await message.answer("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö —ñ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É).")
        return False

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FSInputFile ‚Äî —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        fs_file = types.FSInputFile(file_path)
        # –ü–µ—Ä—à–æ—á–µ—Ä–≥–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –≤—ñ–¥–µ–æ
        await message.answer_video(video=fs_file, caption=caption)
        return True
    except TelegramBadRequest as e:
        # –õ–æ–≥ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        await message.answer(f"TelegramBadRequest –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —è–∫ –≤—ñ–¥–µ–æ: {e}")
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–≤–æ—Ä–∏–º–æ FSInputFile —ñ —Å–ø—Ä–æ–±—É—î–º–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            fs_file = types.FSInputFile(file_path)
            await message.answer_document(document=fs_file, caption=caption)
            return True
        except Exception as e2:
            await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {e2}")
            return False
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {e}")
        return False

def _get_duration_seconds(path: str) -> float | None:
    try:
        out = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", path],
            capture_output=True, text=True, check=True
        )
        return float(out.stdout.strip())
    except Exception:
        return None

def compress_video_to_target(input_path: str, output_path: str, target_size_bytes: int, audio_bitrate_kbps: int = 128) -> bool:
    """
    –°—Ç–∏—Å–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞–∫, —â–æ–± –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤ target_size_bytes.
    –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —ñ –º–∞—î —Ä–æ–∑–º—ñ—Ä <= target_size_bytes.
    """
    duration = _get_duration_seconds(input_path)
    if not duration or duration <= 0:
        return False

    # –∑–∞–ª–∏—à–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –∑–∞–ø–∞—Å (5%)
    target_bits = target_size_bytes * 8 * 0.95
    audio_bps = audio_bitrate_kbps * 1000
    video_bps = (target_bits / duration) - audio_bps
    # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—ñ—Ç—Ä–µ–π—Ç –≤—ñ–¥–µ–æ
    if video_bps < 80_000:
        # –Ω–µ –º–∞—î —Å–µ–Ω—Å—É —Å—Ç–∏—Å–Ω—É—Ç–∏ –¥–æ —Ç–∞–∫–æ—ó –Ω–∏–∑—å–∫–æ—ó —è–∫–æ—Å—Ç—ñ
        return False

    video_k = max(100, int(video_bps / 1000))
    audio_k = audio_bitrate_kbps

    cmd = [
        "ffmpeg", "-y", "-i", input_path,
        "-c:v", "libx264",
        "-b:v", f"{video_k}k",
        "-maxrate", f"{video_k}k",
        "-bufsize", f"{max(2*video_k, video_k)}k",
        "-preset", "fast",
        "-c:a", "aac",
        "-b:a", f"{audio_k}k",
        "-movflags", "+faststart",
        output_path
    ]
    try:
        subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        if os.path.exists(output_path) and os.path.getsize(output_path) <= target_size_bytes:
            return True
        return False
    except Exception:
        # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è/–∫–æ–¥—É–≤–∞–Ω–Ω—è
        try:
            if os.path.exists(output_path):
                os.remove(output_path)
        except Exception:
            pass
        return False

@router.message(Command("download"))
async def cmd_download(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube-–≤—ñ–¥–µ–æ:")
    await state.set_state(DownloadStates.waiting_for_url)

@router.message(DownloadStates.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ, –∑–∞—á–µ–∫–∞–π...")
    
    try:
        file_path = await asyncio.to_thread(download_video, url)

        if not file_path or not os.path.exists(file_path):
            raise RuntimeError("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")

        size = os.path.getsize(file_path)
        if size > TELEGRAM_MAX_FILE_SIZE:
            await message.answer("–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram. –ü—Ä–æ–±—É—é —Å—Ç–∏—Å–Ω—É—Ç–∏...")
            # —Ü—ñ–ª—å ‚Äî —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –ª—ñ–º—ñ—Ç—É (1 MB –∑–∞–ø–∞—Å)
            target = TELEGRAM_MAX_FILE_SIZE - (1 * 1024 * 1024)
            compressed_path = os.path.splitext(file_path)[0] + "_compressed.mp4"
            ok = await asyncio.to_thread(compress_video_to_target, file_path, compressed_path, target)
            if ok:
                csize = os.path.getsize(compressed_path)
                await message.answer(f"–°—Ç–∏—Å–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, —Ä–æ–∑–º—ñ—Ä {csize} –±–∞–π—Ç, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é...")
                sent = await send_local_file_to_user(message, compressed_path, caption="–ì–æ—Ç–æ–≤–æ (—Å—Ç–∏—Å–∫–∞–Ω–Ω—è)")
                try:
                    os.remove(compressed_path)
                except Exception:
                    pass
                if sent:
                    try:
                        os.remove(file_path)
                    except Exception:
                        pass
                    await state.clear()
                    return
                # —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî fallthrough to upload
            else:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–∏—Å–Ω—É—Ç–∏ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–ø—Ä–µ—Å—ñ—ó.")

            # fallback: –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ö–æ—Å—Ç —ñ –≤—ñ–¥–¥–∞—Ç–∏ –ª—ñ–Ω–∫
            await message.answer("–°–ø—Ä–æ–±—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ö–æ—Å—Ç...")
            link = await asyncio.to_thread(upload_to_transfersh, file_path)
            await message.answer(f"debug: returned link -> {repr(link)}")
            if not link:
                await message.answer("–ó–æ–≤–Ω—ñ—à–Ω—ñ–π —Ö–æ—Å—Ç –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
            else:
                link = link.strip()
                parsed = urllib.parse.urlparse(link)
                if parsed.scheme in ("http", "https"):
                    try:
                        if parsed.port is not None and not (1 <= parsed.port <= 65535):
                            raise ValueError("Invalid port")
                    except ValueError:
                        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ä—Ç —É –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ–º—É URL –≤—ñ–¥ —Ö–æ—Å—Ç–∞.")
                    else:
                        await message.answer(f"üîó –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {link}")
                else:
                    await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–∏–π —Ö–æ—Å—Ç –≤—ñ–¥–¥–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL (–Ω–µ http/https).")
        else:
            ok = await send_local_file_to_user(message, file_path, caption="–ì–æ—Ç–æ–≤–æ!")
            if not ok:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—Ä—É—á–Ω—É.")

        try:
            os.remove(file_path)
        except Exception:
            pass

    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    finally:
        await state.clear()