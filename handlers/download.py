from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.youtube import download_best_quality as download_video
import asyncio
import os
import requests
import urllib.parse

router = Router()

class DownloadStates(StatesGroup):
    waiting_for_url = State()

TELEGRAM_MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB ‚Äî –∑–º—ñ–Ω—ñ—Ç—å —è–∫—â–æ —É –≤–∞—Å —ñ–Ω—à–∏–π –ª—ñ–º—ñ—Ç

def upload_to_transfersh(file_path: str) -> str | None:
    """–ü—Ä–æ—Å—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ transfer.sh ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î URL –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ."""
    url = f"https://transfer.sh/{os.path.basename(file_path)}"
    try:
        with open(file_path, "rb") as f:
            resp = requests.put(url, data=f, timeout=120)
        if resp.status_code in (200, 201):
            return resp.text.strip()
    except Exception:
        pass
    return None

@router.message(Command("download"))
async def cmd_download(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube-–≤—ñ–¥–µ–æ:")
    await state.set_state(DownloadStates.waiting_for_url)

@router.message(DownloadStates.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ, –∑–∞—á–µ–∫–∞–π...")
    
    try:
        file_path = await asyncio.to_thread(download_video, url)

        if not file_path or not os.path.exists(file_path):
            raise RuntimeError("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")

        size = os.path.getsize(file_path)
        if size > TELEGRAM_MAX_FILE_SIZE:
            await message.answer("–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram. –°–ø—Ä–æ–±—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ö–æ—Å—Ç...")
            link = await asyncio.to_thread(upload_to_transfersh, file_path)
            # debug/log the returned link
            await message.answer(f"debug: returned link -> {repr(link)}")

            if not link:
                await message.answer("–ó–æ–≤–Ω—ñ—à–Ω—ñ–π —Ö–æ—Å—Ç –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
            else:
                link = link.strip()
                parsed = urllib.parse.urlparse(link)
                # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª —ñ –ø–æ—Ä—Ç (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π)
                if parsed.scheme in ("http", "https"):
                    try:
                        if parsed.port is not None and not (1 <= parsed.port <= 65535):
                            raise ValueError("Invalid port")
                    except ValueError:
                        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ä—Ç —É –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ–º—É URL –≤—ñ–¥ —Ö–æ—Å—Ç–∞.")
                    else:
                        # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                        await message.answer(f"üîó –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {link}")
                else:
                    await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–∏–π —Ö–æ—Å—Ç –≤—ñ–¥–¥–∞–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL (–Ω–µ http/https).")

        else:
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —è–∫ –≤—ñ–¥–µ–æ (–ø–µ—Ä–µ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É)
            await message.answer_video(video=file_path, caption="–ì–æ—Ç–æ–≤–æ!")

        try:
            os.remove(file_path)
        except Exception:
            pass

    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    finally:
        await state.clear()
